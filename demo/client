#!/usr/bin/env node

const {Client} = require('../dist/src');
const {getAPR, getContractAPR} = require('../dist/src')

const program = require('commander');

const client = new Client();


program
    .command('address', 'Generate a new address or print the existing one')
    .option('-i, --init')
    .option('-s, --show')
    .action(async (options) => {
        await client.init();
        if (options.show) {
            let a = await client.getAddress();
            console.log(a);
        }
    });

program
    .command('balance <symbol>', "Get balance in unerlying token or cToken converted")
    .option('-d --db <dbpath>' )
    .action(async (symbol, options) => {
        await client.init(options.db);
        let balance;
        if (symbol === 'eth') {
            balance = await client.getBalanceETH();
        } else if (symbol.startsWith('c')) {
            balance = await client.getBalanceCToken(symbol);
        } else {
            balance = await client.getBalanceToken("c"+symbol)
        }
        console.log(balance)
    });

program
    .command('apr <symbol>', "Get anual revenew from compoud API (mainnet)")
    .action(async (symbol) => {
        let apr = await getAPR(symbol);
        let apr_num = Number(apr) * 100;
        console.log (parseFloat(Math.round(apr_num * 100) / 100).toFixed(2) + "%")
    });

program
    .command('capr <symbol>', "Get anual revenew from web3 contract")
    .action(async (symbol) => {
        let apr = await getContractAPR(symbol);
        let apr_num = Number(apr) * 100;
        console.log (parseFloat(Math.round(apr_num * 100) / 100).toFixed(2) + "%")
    });

program
    .command('mint <symbol> <amount>', "Lend an amount specified to the compound contract")
    .option('-d --db <dbpath>' )
    .action(async (symbol, amount, options) => {
        await client.init(options.db);
        if (symbol === "ceth") {
            client.mintCETH(amount)
        } else { 
            client.mintCToken(symbol, amount)
        }
    });


program
    .command('liquidate <account> <bsym> <amount> <csym>', "Liquidate an account, paying borrowed token, and receiving ctoken")
    .option('-d --db <dbpath>' )
    .action(async (account, bsym, amount, csym, options) => {
        await client.init(options.db);
        client.liquidate(account, bsym, amount, csym)
    });

program
    .command('appmint <symbol> <amount>', "Approve and lend the specifed amount of the underlying token")
    .option('-d --db <dbpath>' )
    .action(async (symbol, amount, options) => {
        await client.init(options.db);
        if (symbol === "ceth") {
            client.mintCETH(amount)
        } else { 
            client.approveAndMintCToken(symbol, amount)
        }
    });

program
    .command('borrow <symbol> <amount>', "Borrow the specifed amount of the underlying token")
    .option('-d --db <dbpath>' )
    .action(async (symbol, amount, options) => {
        await client.init(options.db);
        client.borrowCToken(symbol, amount)
    });

program
    .command('estimate <symbol> <amount>', "Estimate gas limit of minting transaction")
    .action(async (symbol, amount, options) => {
        await client.init(options.db);
        await client.estimateCToken(symbol, amount);
    });

program
    .command('redeem <symbol> <amount>', "Redeem the amount of underlying token from lending")
    .option('-d --db <dbpath>' )
    .action(async (symbol, amount, options) => {
        await client.init(options.db);
        if (amount == 'all') {
            await client.redeemCToken(symbol, 0, true);
        } else {
            await client.redeemCToken(symbol, amount, false);
        }

    });


program
    .command('approve <symbol> <amount>', "Approve the amount to be managed by compound")
    .option('-d --db <dbpath>' )
    .action(async (symbol, amount, options) => {
        await client.init(options.db);
        await client.approveCToken(symbol, amount);
    });

program
    .command('enter <symbol>', "Enter compound market, 'all' to enter all")
    .option('-d --db <dbpath>' )
    .action(async (symbol, options) => {
        await client.init(options.db);
        if (symbol === "all") {
            await client.enterAllMarkets();
        } else {
            await client.enterMarket(symbol);
        }
    });

program
    .command('accrued <symbol>', "Get lifetime interest accrued per symbol")
    .option('-d --db <dbpath>' )
    .action(async (symbol, options) => {
        await client.init(options.db);
        let accrued = await client.accruedInterest(symbol);
        console.log(accrued)
    });

program
    .command('exit <symbol>', "Exclude the specifed address from collateral")
    .option('-d --db <dbpath>' )
    .action(async (symbol, options) => {
        await client.init(options.db);
        await client.exitMarket(symbol);
    });

gram.parse(process.argv);
