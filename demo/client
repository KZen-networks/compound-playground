#!/usr/bin/env node

const {Client} = require('../dist/src');
const {getAPR, getContractAPR} = require('../dist/src')

const program = require('commander');

const client = new Client();


program
    .command('address')
    .option('-i, --init')
    .option('-s, --show')
    .action(async (options) => {
        await client.init();
        if (options.show) {
            let a = await client.getAddress();
            console.log(a);
        }
    });

program
    .command('balance <symbol>')
    .action(async (symbol) => {
        await client.init();
        let balance;
        if (symbol === 'eth') {
            balance = await client.getBalanceETH();
        } else if (symbol.startsWith('c')) {
            balance = await client.getBalanceCToken(symbol);
        } else {
            balance = await client.getBalanceToken("c"+symbol)
        }
        console.log(balance)
    });

program
    .command('apr <symbol>')
    .action(async (symbol) => {
        let apr = await getAPR(symbol);
        apr_num = Number(apr) * 100;
        console.log (parseFloat(Math.round(apr_num * 100) / 100).toFixed(2) + "%")
    });

program
    .command('capr <symbol>')
    .action(async (symbol) => {
        let apr = await getContractAPR(symbol);
        apr_num = Number(apr) * 100;
        console.log (parseFloat(Math.round(apr_num * 100) / 100).toFixed(2) + "%")
    });

program
    .command('mint <symbol> <amount>')
    .action(async (symbol, amount) => {
        await client.init();
        if (symbol === "ceth") {
            client.mintCETH(amount)
        } else { 
            client.mintCToken(symbol, amount)
        }
    });

program
    .command('appmint <symbol> <amount>')
    .action(async (symbol, amount) => {
        await client.init();
        if (symbol === "ceth") {
            client.mintCETH(amount)
        } else { 
            client.approveAndMintCToken(symbol, amount)
        }
    });

program
    .command('borrow <symbol> <amount>')
    .action(async (symbol, amount) => {
        await client.init();
        client.borrowCToken(symbol, amount)
    });

program
    .command('estimate <symbol> <amount>')
    .action(async (symbol, amount) => {
        await client.init();
        await client.estimateCToken(symbol, amount);
    });

program
    .command('redeem <symbol> <amount>')
    .action(async (symbol, amount) => {
        await client.init();
        if (amount == 'all') {
            await client.redeemCToken(symbol, 0, true);
        } else {
            await client.redeemCToken(symbol, amount, false);
        }

    });


program
    .command('approve <symbol> <amount>')
    .action(async (symbol, amount) => {
        await client.init();
        await client.approveCToken(symbol, amount);
    });

program
    .command('enter <symbol>')
    .action(async (symbol) => {
        await client.init();
        if (symbol === "all") {
            await client.enterAllMarkets();
        } else {
            await client.enterMarket(symbol);
        }
    });

program
    .command('exit <symbol>')
    .action(async (symbol) => {
        await client.init();
        await client.exitMarket(symbol);
    });

program.parse(process.argv);
